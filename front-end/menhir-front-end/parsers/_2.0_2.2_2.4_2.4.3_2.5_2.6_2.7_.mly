// Grammar for versions:    2.0    2.2    2.4  2.4.3    2.5    2.6    2.7
// Generated by CompareGrammar on 2018-01-16 at 20:28:52.960+00:00


// Top non-terminals: and_test break_stmt continue_stmt dotted_name for_stmt if_stmt lambdef list_iter listmaker parameters raise_stmt return_stmt start testlist1 while_stmt


%%

%public
if_stmt:
	  IF test COLON suite _star(ELIF test COLON suite {}) _optional(ELSE COLON suite {})
	{} ;

%public
subscript: // Used in: subscriptlist
	  DOT DOT DOT
	| test
	| _optional(test {}) COLON _optional(test {}) _optional(sliceop {})
	{} ;

%public
pass_stmt: // Used in: small_stmt
	  PASS
	{} ;

%public
print_stmt: // Used in: small_stmt
	  PRINT _choice(_optional(test _star(COMMA test {}) _optional(COMMA {}) {}) | RIGHTSHIFT test _optional(_plus(COMMA test {}) _optional(COMMA {}) {}) {})
	{} ;

%public
assert_stmt: // Used in: small_stmt
	  ASSERT test _optional(COMMA test {})
	{} ;

%public
while_stmt:
	  WHILE test COLON suite _optional(ELSE COLON suite {})
	{} ;

%public
exec_stmt: // Used in: small_stmt
	  EXEC expr _optional(IN test _optional(COMMA test {}) {})
	{} ;

%public
sliceop: // Used in: subscript
	  COLON _optional(test {})
	{} ;

%public
listmaker:
	  test _choice(list_for | _star(COMMA test {}) _optional(COMMA {}) {})
	{} ;

%public
return_stmt:
	  RETURN _optional(testlist {})
	{} ;

%public
varargslist: // Used in: parameters, lambdef
	  star_fpdef_COMMA STAR NAME _optional(COMMA DOUBLESTAR NAME {})
	| star_fpdef_COMMA DOUBLESTAR NAME
	| star_fpdef_COMMA fpdef _optional(EQUAL test {}) _optional(COMMA {})
	{} ;

%public
trailer: // Used in: power
	  LPAR _optional(arglist {}) RPAR
	| LSQB subscriptlist RSQB
	| DOT NAME
	{} ;

%public
and_test:
	  not_test _star(AND not_test {})
	{} ;

%public
arith_expr: // Used in: shift_expr
	  term _star(_choice(PLUS | MINUS {}) term {})
	{} ;

%public
for_stmt:
	  FOR exprlist IN testlist COLON suite _optional(ELSE COLON suite {})
	{} ;

%public
factor: // Used in: factor, power
	  _choice(PLUS | MINUS | TILDE {}) factor
	| power
	{} ;

%public
not_test: // Used in: and_test, not_test
	  NOT not_test
	| comparison
	{} ;

%public
testlist: // Used in: return_stmt, for_stmt
	  test _star(COMMA test {}) _optional(COMMA {})
	{} ;

%public
shift_expr: // Used in: and_expr
	  arith_expr _star(_choice(LEFTSHIFT | RIGHTSHIFT {}) arith_expr {})
	{} ;

%public
xor_expr: // Used in: expr
	  and_expr _star(CIRCUMFLEX and_expr {})
	{} ;

%public
fpdef: // Used in: varargslist, star_fpdef_COMMA, fplist
	  NAME
	| LPAR fplist RPAR
	{} ;

%public
start:
	  file_input
	{} ;

%public
file_input: // Used in: start
	  _star(_choice(NEWLINE | stmt {}) {}) ENDMARKER
	{} ;

%public
dotted_name:
	  NAME _star(DOT NAME {})
	{} ;

%public
and_expr: // Used in: xor_expr
	  shift_expr _star(AMPERSAND shift_expr {})
	{} ;

%public
suite: // Used in: if_stmt, while_stmt, for_stmt
	  simple_stmt
	| NEWLINE INDENT _plus(stmt {}) DEDENT
	{} ;

%public
raise_stmt:
	  RAISE _optional(test _optional(COMMA test _optional(COMMA test {}) {}) {})
	{} ;

%public
stmt: // Used in: file_input, suite
	  simple_stmt
	| compound_stmt
	{} ;

%public
continue_stmt:
	  CONTINUE
	{} ;

%public
small_stmt: // Used in: simple_stmt
	  expr_stmt
	| print_stmt
	| del_stmt
	| pass_stmt
	| flow_stmt
	| import_stmt
	| global_stmt
	| exec_stmt
	| assert_stmt
	{} ;

%public
exprlist: // Used in: for_stmt, del_stmt
	  expr _star(COMMA expr {}) _optional(COMMA {})
	{} ;

%public
power: // Used in: factor
	  atom _star(trailer {}) _optional(DOUBLESTAR factor {})
	{} ;

%public
comparison: // Used in: not_test
	  expr _star(comp_op expr {})
	{} ;

%public
list_iter:
	  list_for
	| list_if
	{} ;

%public
expr: // Used in: exec_stmt, exprlist, comparison
	  xor_expr _star(BAR xor_expr {})
	{} ;

%public
star_fpdef_COMMA: // Used in: varargslist, star_fpdef_COMMA
	  star_fpdef_COMMA fpdef _optional(EQUAL test {}) COMMA
	| // empty
	{} ;

%public
break_stmt:
	  BREAK
	{} ;

%public
simple_stmt: // Used in: suite, stmt
	  small_stmt _star(SEMI small_stmt {}) _optional(SEMI {}) NEWLINE
	{} ;

%public
testlist1:
	  test _star(COMMA test {})
	{} ;

%public
parameters:
	  LPAR _optional(varargslist {}) RPAR
	{} ;

%public
comp_op: // Used in: comparison
	  LESS
	| GREATER
	| EQEQUAL
	| GREATEREQUAL
	| LESSEQUAL
	| GRLT
	| NOTEQUAL
	| IN
	| NOT IN
	| IS
	| IS NOT
	{} ;

%public
global_stmt: // Used in: small_stmt
	  GLOBAL NAME _star(COMMA NAME {})
	{} ;

%public
lambdef:
	  LAMBDA _optional(varargslist {}) COLON test
	{} ;

%public
del_stmt: // Used in: small_stmt
	  DEL exprlist
	{} ;

%public
subscriptlist: // Used in: trailer
	  subscript _star(COMMA subscript {}) _optional(COMMA {})
	{} ;

%public
fplist: // Used in: fpdef
	  fpdef _star(COMMA fpdef {}) _optional(COMMA {})
	{} ;


%%


