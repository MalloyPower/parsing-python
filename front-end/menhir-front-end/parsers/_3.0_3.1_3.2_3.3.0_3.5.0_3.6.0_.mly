// Grammar for versions:    3.0    3.1    3.2  3.3.0  3.5.0  3.6.0
// Generated by CompareGrammar on 2018-01-16 at 20:21:38.834+00:00


// Top non-terminals: atom classdef decorators for_stmt funcdef if_stmt start testlist_star_expr tfpdef trailer try_stmt vfpdef while_stmt


%%

%public
lambdef_nocond: // Used in: test_nocond
	  LAMBDA _optional(varargslist {}) COLON test_nocond
	{} ;

%public
import_from: // Used in: import_stmt
	  FROM pick_dotted_name IMPORT _choice(STAR | LPAR import_as_names RPAR | import_as_names {})
	{} ;

%public
tfpdef:
	  NAME _optional(COLON test {})
	{} ;

%public
star_expr: // Used in: exprlist, testlist_star_expr, testlist_comp
	  STAR expr
	{} ;

%public
dotted_as_names: // Used in: import_name
	  dotted_as_name _star(COMMA dotted_as_name {})
	{} ;

%public
if_stmt:
	  IF test COLON suite _star(ELIF test COLON suite {}) _optional(ELSE COLON suite {})
	{} ;

%public
pass_stmt: // Used in: small_stmt
	  PASS
	{} ;

%public
assert_stmt: // Used in: small_stmt
	  ASSERT test _optional(COMMA test {})
	{} ;

%public
while_stmt:
	  WHILE test COLON suite _optional(ELSE COLON suite {})
	{} ;

%public
except_clause: // Used in: try_stmt
	  EXCEPT _optional(test _optional(AS NAME {}) {})
	{} ;

%public
sliceop: // Used in: subscript
	  COLON _optional(test {})
	{} ;

%public
dotted_as_name: // Used in: dotted_as_names
	  dotted_name _optional(AS NAME {})
	{} ;

%public
return_stmt: // Used in: flow_stmt
	  RETURN _optional(testlist {})
	{} ;

%public
comp_iter: // Used in: comp_if
	  comp_for
	| comp_if
	{} ;

%public
small_stmt: // Used in: simple_stmt
	  expr_stmt
	| del_stmt
	| pass_stmt
	| flow_stmt
	| import_stmt
	| global_stmt
	| nonlocal_stmt
	| assert_stmt
	{} ;

%public
vfpdef:
	  NAME
	{} ;

%public
pick_dotted_name: // Used in: import_from
	  _star(_choice(DOT | THREE_DOTS {}) {}) _choice(dotted_name | DOT | THREE_DOTS {})
	{} ;

%public
trailer:
	  LPAR _optional(arglist {}) RPAR
	| LSQB subscriptlist RSQB
	| DOT NAME
	{} ;

%public
and_test: // Used in: or_test
	  not_test _star(AND not_test {})
	{} ;

%public
arith_expr: // Used in: shift_expr
	  term _star(_choice(PLUS | MINUS {}) term {})
	{} ;

%public
test_nocond: // Used in: lambdef_nocond, comp_if
	  or_test
	| lambdef_nocond
	{} ;

%public
for_stmt:
	  FOR exprlist IN testlist COLON suite _optional(ELSE COLON suite {})
	{} ;

%public
import_as_name: // Used in: import_as_names
	  NAME _optional(AS NAME {})
	{} ;

%public
factor: // Used in: factor
	  _choice(PLUS | MINUS | TILDE {}) factor
	| power
	{} ;

%public
not_test: // Used in: and_test, not_test
	  NOT not_test
	| comparison
	{} ;

%public
testlist: // Used in: return_stmt, for_stmt
	  test _star(COMMA test {}) _optional(COMMA {})
	{} ;

%public
shift_expr: // Used in: and_expr
	  arith_expr _star(_choice(LEFTSHIFT | RIGHTSHIFT {}) arith_expr {})
	{} ;

%public
exprlist: // Used in: for_stmt, del_stmt
	  _choice(expr | star_expr {}) _star(COMMA _choice(expr | star_expr {}) {}) _optional(COMMA {})
	{} ;

%public
xor_expr: // Used in: expr
	  and_expr _star(CIRCUMFLEX and_expr {})
	{} ;

%public
subscript: // Used in: subscriptlist
	  test
	| _optional(test {}) COLON _optional(test {}) _optional(sliceop {})
	{} ;

%public
raise_stmt: // Used in: flow_stmt
	  RAISE _optional(test _optional(FROM test {}) {})
	{} ;

%public
start:
	  file_input
	{} ;

%public
file_input: // Used in: start
	  _star(_choice(NEWLINE | stmt {}) {}) ENDMARKER
	{} ;

%public
dotted_name: // Used in: dotted_as_name, pick_dotted_name, decorator
	  NAME _star(DOT NAME {})
	{} ;

%public
and_expr: // Used in: xor_expr
	  shift_expr _star(AMPERSAND shift_expr {})
	{} ;

%public
suite: // Used in: if_stmt, while_stmt, for_stmt, try_stmt, classdef, funcdef
	  simple_stmt
	| NEWLINE INDENT _plus(stmt {}) DEDENT
	{} ;

%public
nonlocal_stmt: // Used in: small_stmt
	  NONLOCAL NAME _star(COMMA NAME {})
	{} ;

%public
decorator: // Used in: decorators
	  AT dotted_name _optional(LPAR _optional(arglist {}) RPAR {}) NEWLINE
	{} ;

%public
stmt: // Used in: file_input, suite
	  simple_stmt
	| compound_stmt
	{} ;

%public
continue_stmt: // Used in: flow_stmt
	  CONTINUE
	{} ;

%public
decorators:
	  _plus(decorator {})
	{} ;

%public
comp_if: // Used in: comp_iter
	  IF test_nocond _optional(comp_iter {})
	{} ;

%public
import_as_names: // Used in: import_from
	  import_as_name _star(COMMA import_as_name {}) _optional(COMMA {})
	{} ;

%public
try_stmt:
	  TRY COLON suite _choice(_plus(except_clause COLON suite {}) _optional(ELSE COLON suite {}) _optional(FINALLY COLON suite {}) | FINALLY COLON suite {})
	{} ;

%public
yield_stmt: // Used in: flow_stmt
	  yield_expr
	{} ;

%public
comparison: // Used in: not_test
	  expr _star(comp_op expr {})
	{} ;

%public
classdef:
	  CLASS NAME _optional(LPAR _optional(arglist {}) RPAR {}) COLON suite
	{} ;

%public
expr: // Used in: star_expr, exprlist, comparison
	  xor_expr _star(BAR xor_expr {})
	{} ;

%public
break_stmt: // Used in: flow_stmt
	  BREAK
	{} ;

%public
funcdef:
	  DEF NAME parameters _optional(ARROW test {}) COLON suite
	{} ;

%public
testlist_star_expr:
	  _choice(test | star_expr {}) _star(COMMA _choice(test | star_expr {}) {}) _optional(COMMA {})
	{} ;

%public
simple_stmt: // Used in: suite, stmt
	  small_stmt _star(SEMI small_stmt {}) _optional(SEMI {}) NEWLINE
	{} ;

%public
import_name: // Used in: import_stmt
	  IMPORT dotted_as_names
	{} ;

%public
flow_stmt: // Used in: small_stmt
	  break_stmt
	| continue_stmt
	| return_stmt
	| raise_stmt
	| yield_stmt
	{} ;

%public
import_stmt: // Used in: small_stmt
	  import_name
	| import_from
	{} ;

%public
atom:
	  LPAR _optional(_choice(yield_expr | testlist_comp {}) {}) RPAR
	| LSQB _optional(testlist_comp {}) RSQB
	| LBRACE _optional(dictorsetmaker {}) RBRACE
	| NAME
	| NUMBER
	| _plus(STRING {})
	| THREE_DOTS
	| NONE
	| TRUE
	| FALSE
	{} ;

%public
or_test: // Used in: test_nocond, test
	  and_test _star(OR and_test {})
	{} ;

%public
test: // Used in: tfpdef, if_stmt, assert_stmt, while_stmt, except_clause, sliceop, testlist, subscript, raise_stmt, funcdef, testlist_star_expr, test, lambdef, testlist_comp
	  or_test _optional(IF or_test ELSE test {})
	| lambdef
	{} ;

%public
global_stmt: // Used in: small_stmt
	  GLOBAL NAME _star(COMMA NAME {})
	{} ;

%public
lambdef: // Used in: test
	  LAMBDA _optional(varargslist {}) COLON test
	{} ;

%public
parameters: // Used in: funcdef
	  LPAR _optional(typedargslist {}) RPAR
	{} ;

%public
del_stmt: // Used in: small_stmt
	  DEL exprlist
	{} ;

%public
subscriptlist: // Used in: trailer
	  subscript _star(COMMA subscript {}) _optional(COMMA {})
	{} ;

%public
testlist_comp: // Used in: atom
	  _choice(test | star_expr {}) _choice(comp_for | _star(COMMA _choice(test | star_expr {}) {}) _optional(COMMA {}) {})
	{} ;


%%


