// Grammar for versions:                              3.5.0  3.6.0
// Generated by CompareGrammar on 2018-01-16 at 20:21:38.902+00:00


// Top non-terminals: arglist augassign compound_stmt dictorsetmaker power term


%%

%public
decorated: // Used in: compound_stmt
	  decorators _choice(classdef | funcdef | async_funcdef {})
	{} ;

%public
async_stmt: // Used in: compound_stmt
	  ASYNC _choice(funcdef | with_stmt | for_stmt {})
	{} ;

%public
compound_stmt:
	  if_stmt
	| while_stmt
	| for_stmt
	| try_stmt
	| with_stmt
	| funcdef
	| classdef
	| decorated
	| async_stmt
	{} ;

%public
arglist:
	  argument _star(COMMA argument {}) _optional(COMMA {})
	{} ;

%public
async_funcdef: // Used in: decorated
	  ASYNC funcdef
	{} ;

%public
argument: // Used in: arglist
	  test _optional(comp_for {})
	| test EQUAL test
	| DOUBLESTAR test
	| STAR test
	{} ;

%public
augassign:
	  PLUSEQUAL
	| MINEQUAL
	| STAREQUAL
	| ATEQ
	| SLASHEQUAL
	| PERCENTEQUAL
	| AMPEREQUAL
	| VBAREQUAL
	| CIRCUMFLEXEQUAL
	| LEFTSHIFTEQUAL
	| RIGHTSHIFTEQUAL
	| DOUBLESTAREQUAL
	| DOUBLESLASHEQUAL
	{} ;

%public
dictorsetmaker:
	  _choice(test COLON test | DOUBLESTAR expr {}) _choice(comp_for | _star(COMMA _choice(test COLON test | DOUBLESTAR expr {}) {}) _optional(COMMA {}) {})
	| _choice(test | star_expr {}) _choice(comp_for | _star(COMMA _choice(test | star_expr {}) {}) _optional(COMMA {}) {})
	{} ;

%public
atom_expr: // Used in: power
	  _optional(AWAIT {}) atom _star(trailer {})
	{} ;

%public
term:
	  factor _star(_choice(STAR | AT | SLASH | PERCENT | DOUBLESLASH {}) factor {})
	{} ;

%public
power:
	  atom_expr _optional(DOUBLESTAR factor {})
	{} ;


%%


