### Grammar for Python version 1.5
### Retrieved and processed by getGrammar.py on Thu Sep  1 20:08:52 2016

#L 
# Extracted from ref-3.html:
#L name:           lc_letter (lc_letter | "_")* 
#L lc_letter:      "a"..."z" 
#L 
# Extracted from ref-4.html:
#L identifier:     (letter|"_") (letter|digit|"_")* 
#L letter:         lowercase | uppercase 
#L lowercase:      "a"..."z" 
#L uppercase:      "A"..."Z" 
#L digit:          "0"..."9" 
#L stringliteral:   [rawprefix] (shortstring | longstring)
#L rawprefix:       "r" | "R"
#L shortstring:     "'" shortstringitem* "'" | '"' shortstringitem* '"' 
#L longstring:      "'''" longstringitem* "'''" | '"""' longstringitem* '"""'
#L shortstringitem: shortstringchar | escapeseq 
#L longstringitem:  longstringchar | escapeseq 
#L shortstringchar: <any ASCII character except "\" or newline or the quote> 
#L longstringchar:  <any ASCII character except "\"> 
#L escapeseq:       "\" <any ASCII character> 
#L longinteger:    integer ("l"|"L") 
#L integer:        decimalinteger | octinteger | hexinteger 
#L decimalinteger: nonzerodigit digit* | "0" 
#L octinteger:     "0" octdigit+ 
#L hexinteger:     "0" ("x"|"X") hexdigit+ 
#L nonzerodigit:   "1"..."9" 
#L octdigit:       "0"..."7" 
#L hexdigit:       digit|"a"..."f"|"A"..."F" 
#L floatnumber:    pointfloat | exponentfloat 
#L pointfloat:     [intpart] fraction | intpart "." 
#L exponentfloat:  (intpart | pointfloat) exponent 
#L intpart:        nonzerodigit digit* | "0"
#L fraction:       "." digit+ 
#L exponent:       ("e"|"E") ["+"|"-"] digit+ 
#L imagnumber:     (floatnumber | intpart) ("j"|"J")
#L 
# Extracted from ref-7.html:
#L name:    othername 

atom:      identifier | literal | enclosure
enclosure: parenth_form|list_display|dict_display|string_conversion
literal:   stringliteral | integer | longinteger | floatnumber | imagnumber
parenth_form:      "(" [expression_list] ")" 
list_display:   "[" [expression_list] "]" 
dict_display:   "{" [key_datum_list] "}" 
key_datum_list: key_datum ("," key_datum)* [","] 
key_datum:      expression ":" expression 
string_conversion: "'" expression_list "'" 
primary:        atom | attributeref | subscription | slicing | call 
attributeref:   primary "." identifier 
subscription:   primary "[" expression_list "]" 
slicing:          simple_slicing | extended_slicing
simple_slicing:   primary "[" short_slice "]"
extended_slicing: primary "[" slice_list "]" 
slice_list:       slice_item ("," slice_item)* [","]
slice_item:       expression | proper_slice | ellipsis
proper_slice:     short_slice | long_slice
short_slice:      [lower_bound] ":" [upper_bound]
long_slice:       short_slice ":" [stride]
lower_bound:      expression
upper_bound:      expression
stride:           expression
ellipsis:         "..."
call:                 primary "(" [argument_list [","]] ")"
argument_list:        positional_arguments ["," keyword_arguments]
                    | keyword_arguments
positional_arguments: expression ("," expression)*
keyword_arguments:    keyword_item ("," keyword_item)*
keyword_item:         identifier "=" expression
power:         primary ["**" u_expr]
u_expr:         power | "-" u_expr | "+" u_expr | "~" u_expr 
m_expr:         u_expr | m_expr "*" u_expr 
              | m_expr "/" u_expr | m_expr "%" u_expr 
a_expr:         m_expr | a_expr "+" m_expr | a_expr "-" m_expr 
shift_expr:     a_expr | shift_expr ( "<<" | ">>" ) a_expr 
and_expr:       shift_expr | and_expr "&" shift_expr 
xor_expr:       and_expr | xor_expr "^" and_expr 
or_expr:       xor_expr | or_expr "|" xor_expr 
comparison:     or_expr (comp_operator or_expr)* 
comp_operator:  "<"|">"|"=="|">="|"<="|"<>"|"!="|"is" ["not"]|["not"] "in" 
expression:      or_test | lambda_form 
or_test:        and_test | or_test "or" and_test 
and_test:       not_test | and_test "and" not_test 
not_test:       comparison | "not" not_test 
lambda_form:	"lambda" [parameter_list] ":" expression 
expression_list:      expression ("," expression)* [","] 

# Extracted from ref-8.html:
simple_stmt:    expression_stmt 
              | assert_stmt 
              | assignment_stmt 
              | pass_stmt 
              | del_stmt 
              | print_stmt 
              | return_stmt 
              | raise_stmt 
              | break_stmt 
              | continue_stmt 
              | import_stmt 
              | global_stmt 
              | exec_stmt 
expression_stmt: expression_list 
assert_statement: "assert" expression ["," expression]
assignment_stmt: (target_list "=")+ expression_list 
target_list:     target ("," target)* [","] 
target:          identifier | "(" target_list ")" | "[" target_list "]" 
               | attributeref | subscription | slicing 
pass_stmt:      "pass" 
del_stmt:       "del" target_list 
print_stmt:     "print" [ expression ("," expression)* [","] ] 
return_stmt:    "return" [expression_list] 
raise_stmt:     "raise" expression ["," expression ["," expression]] 
break_stmt:     "break" 
continue_stmt:  "continue" 
import_stmt:    "import" module ("," module)* 
              | "from" module "import" identifier ("," identifier)*
              | "from" module "import" "*" 
module:         (identifier ".")* identifier
global_stmt:    "global" identifier ("," identifier)* 
exec_stmt:    "exec" expression ["in" expression ["," expression]] 

# Extracted from ref-9.html:
compound_stmt:  if_stmt | while_stmt | for_stmt 
              | try_stmt | funcdef | classdef 
suite:          stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT 
statement:      stmt_list NEWLINE | compound_stmt 
stmt_list:      simple_stmt (";" simple_stmt)* [";"] 
if_stmt:        "if" expression ":" suite 
while_stmt:     "while" expression ":" suite 
for_stmt:       "for" target_list "in" expression_list ":" suite 
try_stmt:       try_exc_stmt | try_fin_stmt 
try_exc_stmt:   "try" ":" suite 
try_fin_stmt:   "try" ":" suite 
funcdef:        "def" funcname "(" [parameter_list] ")" ":" suite 
parameter_list: (defparameter ",")* ("*" identifier ["," "**" identifier] 
                                    | "**" identifier 
                                    | defparameter [","]) 
defparameter:   parameter ["=" expression] 
sublist:        parameter ("," parameter)* [","] 
parameter:      identifier | "(" sublist ")" 
funcname:       identifier 
classdef:       "class" classname [inheritance] ":" suite 
inheritance:    "(" [expression_list] ")" 
classname:      identifier 

# Extracted from ref-10.html:
file_input:     (NEWLINE | statement)* 
interactive_input: [stmt_list] NEWLINE | compound_stmt NEWLINE 
eval_input:     expression_list NEWLINE* 
input_input:    expression_list NEWLINE 
