### Grammar for Python version 1.5.2
### Retrieved and processed by getGrammar.py on Thu Sep  1 20:08:20 2016

#L 
# Extracted from notation.html:
#L name:           lc_letter (lc_letter | "_")*
#L lc_letter:      "a"..."z"
#L 
# Extracted from identifiers.html:
#L identifier:     (letter|"_") (letter|digit|"_")*
#L letter:         lowercase | uppercase
#L lowercase:      "a"..."z"
#L uppercase:      "A"..."Z"
#L digit:          "0"..."9"
#L 
# Extracted from expressions.html:
#L name:           othername
#L 
# Extracted from atoms.html:

atom:      identifier | literal | enclosure
enclosure: parenth_form|list_display|dict_display|string_conversion

# Extracted from primaries.html:
primary:        atom | attributeref | subscription | slicing | call

# Extracted from power.html:
power:         primary ["**" u_expr]

# Extracted from unary.html:
u_expr:         power | "-" u_expr | "+" u_expr | "~" u_expr

# Extracted from binary.html:
m_expr:         u_expr | m_expr "*" u_expr
              | m_expr "/" u_expr | m_expr "%" u_expr
a_expr:         m_expr | a_expr "+" m_expr | a_expr "-" m_expr

# Extracted from shifting.html:
shift_expr:     a_expr | shift_expr ( "<<" | ">>" ) a_expr

# Extracted from bitwise.html:
and_expr:       shift_expr | and_expr "&" shift_expr
xor_expr:       and_expr | xor_expr "^" and_expr
or_expr:       xor_expr | or_expr "|" xor_expr

# Extracted from comparisons.html:
comparison:     or_expr (comp_operator or_expr)*
comp_operator:  "<"|">"|"=="|">="|"<="|"<>"|"!="|"is" ["not"]|["not"] "in"

# Extracted from lambda.html:
expression:     or_test | lambda_form
or_test:        and_test | or_test "or" and_test
and_test:       not_test | and_test "and" not_test
not_test:       comparison | "not" not_test
lambda_form:	"lambda" [parameter_list] ":" expression

# Extracted from exprlists.html:
expression_list:      expression ("," expression)* [","]

# Extracted from simple.html:
simple_stmt:    expression_stmt
              | assert_stmt
              | assignment_stmt
              | pass_stmt
              | del_stmt
              | print_stmt
              | return_stmt
              | raise_stmt
              | break_stmt
              | continue_stmt
              | import_stmt
              | global_stmt
              | exec_stmt

# Extracted from exprstmts.html:
expression_stmt: expression_list

# Extracted from assert.html:
assert_statement: "assert" expression ["," expression]

# Extracted from assignment.html:
assignment_stmt: (target_list "=")+ expression_list
target_list:     target ("," target)* [","]
target:          identifier | "(" target_list ")" | "[" target_list "]"
               | attributeref | subscription | slicing

# Extracted from pass.html:
pass_stmt:      "pass"

# Extracted from del.html:
del_stmt:       "del" target_list

# Extracted from print.html:
print_stmt:     "print" [ expression ("," expression)* [","] ]

# Extracted from return.html:
return_stmt:    "return" [expression_list]

# Extracted from raise.html:
raise_stmt:     "raise" [expression ["," expression ["," expression]]]

# Extracted from break.html:
break_stmt:     "break"

# Extracted from continue.html:
continue_stmt:  "continue"

# Extracted from import.html:
import_stmt:    "import" module ("," module)* 
              | "from" module "import" identifier ("," identifier)*
              | "from" module "import" "*" 
module:         (identifier ".")* identifier

# Extracted from global.html:
global_stmt:    "global" identifier ("," identifier)*

# Extracted from exec.html:
exec_stmt:    "exec" expression ["in" expression ["," expression]]

# Extracted from compound.html:
compound_stmt:  if_stmt | while_stmt | for_stmt
              | try_stmt | funcdef | classdef
suite:          stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT
statement:      stmt_list NEWLINE | compound_stmt
stmt_list:      simple_stmt (";" simple_stmt)* [";"]

# Extracted from if.html:
if_stmt:        "if" expression ":" suite

# Extracted from while.html:
while_stmt:     "while" expression ":" suite

# Extracted from for.html:
for_stmt:       "for" target_list "in" expression_list ":" suite

# Extracted from try.html:
try_stmt:       try_exc_stmt | try_fin_stmt
try_exc_stmt:   "try" ":" suite
try_fin_stmt:   "try" ":" suite

# Extracted from function.html:
funcdef:        "def" funcname "(" [parameter_list] ")" ":" suite
parameter_list: (defparameter ",")* ("*" identifier ["," "**" identifier] 
                                    | "**" identifier 
                                    | defparameter [","])
defparameter:   parameter ["=" expression]
sublist:        parameter ("," parameter)* [","]
parameter:      identifier | "(" sublist ")"
funcname:       identifier

# Extracted from class.html:
classdef:       "class" classname [inheritance] ":" suite
inheritance:    "(" [expression_list] ")"
classname:      identifier

# Extracted from file-input.html:
file_input:     (NEWLINE | statement)*

# Extracted from interactive.html:
interactive_input: [stmt_list] NEWLINE | compound_stmt NEWLINE

# Extracted from expression-input.html:
eval_input:     expression_list NEWLINE*
input_input:    expression_list NEWLINE
