// Automatically generated from 2.2.txt on 2016-11-23 at 16:45:42 +0000
// Transformations to convert (bisonify) 2.2.txt to 2.2.y

// replace embedded choice in file_input ::= "NEWLINE" | stmt
extract pick_NEWLINE_stmt ::= "NEWLINE" | stmt; in file_input.
// replace star in file_input ::= pick_NEWLINE_stmt*
extract star_1 ::= pick_NEWLINE_stmt*; in file_input.
yaccify star_1 ::= (star_1 pick_NEWLINE_stmt) | ε;. // replaces pick_NEWLINE_stmt*
// replace star in eval_input ::= "NEWLINE"*
extract star_NEWLINE ::= "NEWLINE"*; in eval_input.
yaccify star_NEWLINE ::= (star_NEWLINE "NEWLINE") | ε;. // replaces "NEWLINE"*
// expand top-level with a single option in parameters ::= "LPAR" varargslist? "RPAR"
massage varargslist? to (varargslist | ε) in parameters.
distribute in parameters.
// replace optional in varargslist ::= ("EQUAL" test)?
extract opt_EQUAL_test ::= ("EQUAL" test)?; in varargslist.
massage ("EQUAL" test)? to (("EQUAL" test) | ε) in opt_EQUAL_test.
// replace star in varargslist ::= (fpdef opt_EQUAL_test "COMMA")*
extract star_fpdef_COMMA ::= (fpdef opt_EQUAL_test "COMMA")*; in varargslist.
yaccify star_fpdef_COMMA ::= (star_fpdef_COMMA (fpdef opt_EQUAL_test "COMMA")) | ε;. // replaces (fpdef opt_EQUAL_test "COMMA")*
// replace optional in varargslist ::= ("COMMA" "DOUBLESTAR" "NAME")?
extract opt_5 ::= ("COMMA" "DOUBLESTAR" "NAME")?; in varargslist.
massage ("COMMA" "DOUBLESTAR" "NAME")? to (("COMMA" "DOUBLESTAR" "NAME") | ε) in opt_5.
// replace embedded choice in varargslist ::= ("STAR" "NAME" opt_5) | ("DOUBLESTAR" "NAME")
extract pick_6 ::= ("STAR" "NAME" opt_5) | ("DOUBLESTAR" "NAME"); in varargslist.
// replace star in varargslist ::= ("COMMA" fpdef opt_EQUAL_test)*
extract star_COMMA_fpdef ::= ("COMMA" fpdef opt_EQUAL_test)*; in varargslist.
yaccify star_COMMA_fpdef ::= (star_COMMA_fpdef ("COMMA" fpdef opt_EQUAL_test)) | ε;. // replaces ("COMMA" fpdef opt_EQUAL_test)*
// replace optional in varargslist ::= "COMMA"?
extract opt_COMMA ::= "COMMA"?; in varargslist.
massage "COMMA"? to ("COMMA" | ε) in opt_COMMA.
// expand top-level with a single option in fplist ::= fpdef ("COMMA" fpdef)* "COMMA"?
massage "COMMA"? to ("COMMA" | ε) in fplist.
distribute in fplist.
// replace star in fplist ::= ("COMMA" fpdef)*
extract star_9 ::= ("COMMA" fpdef)*; in fplist.
yaccify star_9 ::= (star_9 ("COMMA" fpdef)) | ε;. // replaces ("COMMA" fpdef)*
// expand top-level with a single option in simple_stmt ::= small_stmt ("SEMI" small_stmt)* "SEMI"? "NEWLINE"
massage "SEMI"? to ("SEMI" | ε) in simple_stmt.
distribute in simple_stmt.
// replace star in simple_stmt ::= ("SEMI" small_stmt)*
extract star_SEMI_small_stmt ::= ("SEMI" small_stmt)*; in simple_stmt.
yaccify star_SEMI_small_stmt ::= (star_SEMI_small_stmt ("SEMI" small_stmt)) | ε;. // replaces ("SEMI" small_stmt)*
// expand top-level with a single choice in expr_stmt ::= testlist ((augassign testlist) | ("EQUAL" testlist)*)
distribute in expr_stmt.
// replace star in expr_stmt ::= ("EQUAL" testlist)*
extract star_EQUAL_testlist ::= ("EQUAL" testlist)*; in expr_stmt.
yaccify star_EQUAL_testlist ::= (star_EQUAL_testlist ("EQUAL" testlist)) | ε;. // replaces ("EQUAL" testlist)*
// expand top-level with a single choice in print_stmt ::= "PRINT" ((test ("COMMA" test)* "COMMA"?)? | ("RIGHTSHIFT" test (("COMMA" test)+ "COMMA"?)?))
distribute in print_stmt.
// replace star in print_stmt ::= ("COMMA" test)*
extract star_COMMA_test ::= ("COMMA" test)*; in print_stmt.
yaccify star_COMMA_test ::= (star_COMMA_test ("COMMA" test)) | ε;. // replaces ("COMMA" test)*
// replace optional in print_stmt ::= "COMMA"?
extract opt_13 ::= "COMMA"?; in print_stmt.
massage "COMMA"? to ("COMMA" | ε) in opt_13.
// replace optional in print_stmt ::= (test star_COMMA_test opt_13)?
extract opt_test ::= (test star_COMMA_test opt_13)?; in print_stmt.
massage (test star_COMMA_test opt_13)? to ((test star_COMMA_test opt_13) | ε) in opt_test.
// replace plus in print_stmt ::= ("COMMA" test)+
extract plus_COMMA_test ::= ("COMMA" test)+; in print_stmt.
yaccify plus_COMMA_test ::= (plus_COMMA_test ("COMMA" test)) | ("COMMA" test);. // replaces ("COMMA" test)+
// replace optional in print_stmt ::= (plus_COMMA_test opt_13)?
extract opt_16 ::= (plus_COMMA_test opt_13)?; in print_stmt.
massage (plus_COMMA_test opt_13)? to ((plus_COMMA_test opt_13) | ε) in opt_16.
// expand top-level with a single option in return_stmt ::= "RETURN" testlist?
massage testlist? to (testlist | ε) in return_stmt.
distribute in return_stmt.
// expand top-level with a single option in raise_stmt ::= "RAISE" (test ("COMMA" test ("COMMA" test)?)?)?
massage (test ("COMMA" test ("COMMA" test)?)?)? to ((test ("COMMA" test ("COMMA" test)?)?) | ε) in raise_stmt.
distribute in raise_stmt.
// replace optional in raise_stmt ::= ("COMMA" test)?
extract opt_COMMA_test ::= ("COMMA" test)?; in raise_stmt.
massage ("COMMA" test)? to (("COMMA" test) | ε) in opt_COMMA_test.
// replace optional in raise_stmt ::= ("COMMA" test opt_COMMA_test)?
extract opt_18 ::= ("COMMA" test opt_COMMA_test)?; in raise_stmt.
massage ("COMMA" test opt_COMMA_test)? to (("COMMA" test opt_COMMA_test) | ε) in opt_18.
// replace star in import_stmt ::= ("COMMA" dotted_as_name)*
extract star_COMMA_dotted_as_name ::= ("COMMA" dotted_as_name)*; in import_stmt.
yaccify star_COMMA_dotted_as_name ::= (star_COMMA_dotted_as_name ("COMMA" dotted_as_name)) | ε;. // replaces ("COMMA" dotted_as_name)*
// replace star in import_stmt ::= ("COMMA" import_as_name)*
extract star_COMMA_import_as_name ::= ("COMMA" import_as_name)*; in import_stmt.
yaccify star_COMMA_import_as_name ::= (star_COMMA_import_as_name ("COMMA" import_as_name)) | ε;. // replaces ("COMMA" import_as_name)*
// replace embedded choice in import_stmt ::= "STAR" | (import_as_name star_COMMA_import_as_name)
extract pick_STAR_import_as_name ::= "STAR" | (import_as_name star_COMMA_import_as_name); in import_stmt.
// expand top-level with a single option in import_as_name ::= "NAME" ("NAME" "NAME")?
massage ("NAME" "NAME")? to (("NAME" "NAME") | ε) in import_as_name.
distribute in import_as_name.
// expand top-level with a single option in dotted_as_name ::= dotted_name ("NAME" "NAME")?
massage ("NAME" "NAME")? to (("NAME" "NAME") | ε) in dotted_as_name.
distribute in dotted_as_name.
// expand top-level tail iteration in dotted_name ::= "NAME" ("DOT" "NAME")*
yaccify dotted_name ::= ("NAME") | (dotted_name ("DOT" "NAME"));. // replaces "NAME" ("DOT" "NAME")*
// replace star in global_stmt ::= ("COMMA" "NAME")*
extract star_COMMA_NAME ::= ("COMMA" "NAME")*; in global_stmt.
yaccify star_COMMA_NAME ::= (star_COMMA_NAME ("COMMA" "NAME")) | ε;. // replaces ("COMMA" "NAME")*
// expand top-level with a single option in exec_stmt ::= "EXEC" expr ("IN" test ("COMMA" test)?)?
massage ("IN" test ("COMMA" test)?)? to (("IN" test ("COMMA" test)?) | ε) in exec_stmt.
distribute in exec_stmt.
// replace optional in exec_stmt ::= ("COMMA" test)?
extract opt_23 ::= ("COMMA" test)?; in exec_stmt.
massage ("COMMA" test)? to (("COMMA" test) | ε) in opt_23.
// expand top-level with a single option in assert_stmt ::= "ASSERT" test ("COMMA" test)?
massage ("COMMA" test)? to (("COMMA" test) | ε) in assert_stmt.
distribute in assert_stmt.
// expand top-level with a single option in if_stmt ::= "IF" test "COLON" suite ("ELIF" test "COLON" suite)* ("ELSE" "COLON" suite)?
massage ("ELSE" "COLON" suite)? to (("ELSE" "COLON" suite) | ε) in if_stmt.
distribute in if_stmt.
// replace star in if_stmt ::= ("ELIF" test "COLON" suite)*
extract star_24 ::= ("ELIF" test "COLON" suite)*; in if_stmt.
yaccify star_24 ::= (star_24 ("ELIF" test "COLON" suite)) | ε;. // replaces ("ELIF" test "COLON" suite)*
// expand top-level with a single option in while_stmt ::= "WHILE" test "COLON" suite ("ELSE" "COLON" suite)?
massage ("ELSE" "COLON" suite)? to (("ELSE" "COLON" suite) | ε) in while_stmt.
distribute in while_stmt.
// expand top-level with a single option in for_stmt ::= "FOR" exprlist "IN" testlist "COLON" suite ("ELSE" "COLON" suite)?
massage ("ELSE" "COLON" suite)? to (("ELSE" "COLON" suite) | ε) in for_stmt.
distribute in for_stmt.
// replace plus in try_stmt ::= (except_clause "COLON" suite)+
extract plus_25 ::= (except_clause "COLON" suite)+; in try_stmt.
yaccify plus_25 ::= (plus_25 (except_clause "COLON" suite)) | (except_clause "COLON" suite);. // replaces (except_clause "COLON" suite)+
// replace optional in try_stmt ::= ("ELSE" "COLON" suite)?
extract opt_26 ::= ("ELSE" "COLON" suite)?; in try_stmt.
massage ("ELSE" "COLON" suite)? to (("ELSE" "COLON" suite) | ε) in opt_26.
// expand top-level with a single option in except_clause ::= "EXCEPT" (test ("COMMA" test)?)?
massage (test ("COMMA" test)?)? to ((test ("COMMA" test)?) | ε) in except_clause.
distribute in except_clause.
// replace optional in except_clause ::= ("COMMA" test)?
extract opt_27 ::= ("COMMA" test)?; in except_clause.
massage ("COMMA" test)? to (("COMMA" test) | ε) in opt_27.
// replace plus in suite ::= stmt+
extract plus_stmt ::= stmt+; in suite.
yaccify plus_stmt ::= (plus_stmt stmt) | stmt;. // replaces stmt+
// replace star in test ::= ("OR" and_test)*
extract star_OR_and_test ::= ("OR" and_test)*; in test.
yaccify star_OR_and_test ::= (star_OR_and_test ("OR" and_test)) | ε;. // replaces ("OR" and_test)*
// expand top-level tail iteration in and_test ::= not_test ("AND" not_test)*
yaccify and_test ::= (not_test) | (and_test ("AND" not_test));. // replaces not_test ("AND" not_test)*
// expand top-level tail iteration in comparison ::= expr (comp_op expr)*
yaccify comparison ::= (expr) | (comparison (comp_op expr));. // replaces expr (comp_op expr)*
// expand top-level tail iteration in expr ::= xor_expr ("BAR" xor_expr)*
yaccify expr ::= (xor_expr) | (expr ("BAR" xor_expr));. // replaces xor_expr ("BAR" xor_expr)*
// expand top-level tail iteration in xor_expr ::= and_expr ("CIRCUMFLEX" and_expr)*
yaccify xor_expr ::= (and_expr) | (xor_expr ("CIRCUMFLEX" and_expr));. // replaces and_expr ("CIRCUMFLEX" and_expr)*
// expand top-level tail iteration in and_expr ::= shift_expr ("AMPERSAND" shift_expr)*
yaccify and_expr ::= (shift_expr) | (and_expr ("AMPERSAND" shift_expr));. // replaces shift_expr ("AMPERSAND" shift_expr)*
// expand top-level tail iteration in shift_expr ::= arith_expr (("LEFTSHIFT" | "RIGHTSHIFT") arith_expr)*
yaccify shift_expr ::= (arith_expr) | (shift_expr (("LEFTSHIFT" | "RIGHTSHIFT") arith_expr));. // replaces arith_expr (("LEFTSHIFT" | "RIGHTSHIFT") arith_expr)*
// replace embedded choice in shift_expr ::= "LEFTSHIFT" | "RIGHTSHIFT"
extract pick_LEFTSHIFT_RIGHTSHIFT ::= "LEFTSHIFT" | "RIGHTSHIFT"; in shift_expr.
// expand top-level tail iteration in arith_expr ::= term (("PLUS" | "MINUS") term)*
yaccify arith_expr ::= (term) | (arith_expr (("PLUS" | "MINUS") term));. // replaces term (("PLUS" | "MINUS") term)*
// replace embedded choice in arith_expr ::= "PLUS" | "MINUS"
extract pick_PLUS_MINUS ::= "PLUS" | "MINUS"; in arith_expr.
// expand top-level tail iteration in term ::= factor (("STAR" | "SLASH" | "PERCENT" | "DOUBLESLASH") factor)*
yaccify term ::= (factor) | (term (("STAR" | "SLASH" | "PERCENT" | "DOUBLESLASH") factor));. // replaces factor (("STAR" | "SLASH" | "PERCENT" | "DOUBLESLASH") factor)*
// replace embedded choice in term ::= "STAR" | "SLASH" | "PERCENT" | "DOUBLESLASH"
extract pick_32 ::= "STAR" | "SLASH" | "PERCENT" | "DOUBLESLASH"; in term.
// replace embedded choice in factor ::= "PLUS" | "MINUS" | "TILDE"
extract pick_33 ::= "PLUS" | "MINUS" | "TILDE"; in factor.
// replace star in power ::= trailer*
extract star_trailer ::= trailer*; in power.
yaccify star_trailer ::= (star_trailer trailer) | ε;. // replaces trailer*
// replace star in power ::= ("DOUBLESTAR" factor)*
extract star_DOUBLESTAR_factor ::= ("DOUBLESTAR" factor)*; in power.
yaccify star_DOUBLESTAR_factor ::= (star_DOUBLESTAR_factor ("DOUBLESTAR" factor)) | ε;. // replaces ("DOUBLESTAR" factor)*
// replace optional in atom ::= testlist?
extract opt_testlist ::= testlist?; in atom.
massage testlist? to (testlist | ε) in opt_testlist.
// replace optional in atom ::= listmaker?
extract opt_listmaker ::= listmaker?; in atom.
massage listmaker? to (listmaker | ε) in opt_listmaker.
// replace optional in atom ::= dictmaker?
extract opt_dictmaker ::= dictmaker?; in atom.
massage dictmaker? to (dictmaker | ε) in opt_dictmaker.
// replace plus in atom ::= "STRING"+
extract plus_STRING ::= "STRING"+; in atom.
yaccify plus_STRING ::= (plus_STRING "STRING") | "STRING";. // replaces "STRING"+
// expand top-level with a single choice in listmaker ::= test (list_for | (("COMMA" test)* "COMMA"?))
distribute in listmaker.
// replace star in listmaker ::= ("COMMA" test)*
extract star_40 ::= ("COMMA" test)*; in listmaker.
yaccify star_40 ::= (star_40 ("COMMA" test)) | ε;. // replaces ("COMMA" test)*
// replace optional in listmaker ::= "COMMA"?
extract opt_41 ::= "COMMA"?; in listmaker.
massage "COMMA"? to ("COMMA" | ε) in opt_41.
// expand top-level with a single option in lambdef ::= "LAMBDA" varargslist? "COLON" test
massage varargslist? to (varargslist | ε) in lambdef.
distribute in lambdef.
// replace optional in trailer ::= arglist?
extract opt_arglist ::= arglist?; in trailer.
massage arglist? to (arglist | ε) in opt_arglist.
// expand top-level with a single option in subscriptlist ::= subscript ("COMMA" subscript)* "COMMA"?
massage "COMMA"? to ("COMMA" | ε) in subscriptlist.
distribute in subscriptlist.
// replace star in subscriptlist ::= ("COMMA" subscript)*
extract star_COMMA_subscript ::= ("COMMA" subscript)*; in subscriptlist.
yaccify star_COMMA_subscript ::= (star_COMMA_subscript ("COMMA" subscript)) | ε;. // replaces ("COMMA" subscript)*
// replace optional in subscript ::= test?
extract opt_44 ::= test?; in subscript.
massage test? to (test | ε) in opt_44.
// replace optional in subscript ::= sliceop?
extract opt_sliceop ::= sliceop?; in subscript.
massage sliceop? to (sliceop | ε) in opt_sliceop.
// expand top-level with a single option in sliceop ::= "COLON" test?
massage test? to (test | ε) in sliceop.
distribute in sliceop.
// expand top-level with a single option in exprlist ::= expr ("COMMA" expr)* "COMMA"?
massage "COMMA"? to ("COMMA" | ε) in exprlist.
distribute in exprlist.
// replace star in exprlist ::= ("COMMA" expr)*
extract star_COMMA_expr ::= ("COMMA" expr)*; in exprlist.
yaccify star_COMMA_expr ::= (star_COMMA_expr ("COMMA" expr)) | ε;. // replaces ("COMMA" expr)*
// expand top-level with a single option in testlist ::= test ("COMMA" test)* "COMMA"?
massage "COMMA"? to ("COMMA" | ε) in testlist.
distribute in testlist.
// replace star in testlist ::= ("COMMA" test)*
extract star_47 ::= ("COMMA" test)*; in testlist.
yaccify star_47 ::= (star_47 ("COMMA" test)) | ε;. // replaces ("COMMA" test)*
// expand top-level with a single option in testlist_safe ::= test (("COMMA" test)+ "COMMA"?)?
massage (("COMMA" test)+ "COMMA"?)? to ((("COMMA" test)+ "COMMA"?) | ε) in testlist_safe.
distribute in testlist_safe.
// replace plus in testlist_safe ::= ("COMMA" test)+
extract plus_48 ::= ("COMMA" test)+; in testlist_safe.
yaccify plus_48 ::= (plus_48 ("COMMA" test)) | ("COMMA" test);. // replaces ("COMMA" test)+
// replace optional in testlist_safe ::= "COMMA"?
extract opt_49 ::= "COMMA"?; in testlist_safe.
massage "COMMA"? to ("COMMA" | ε) in opt_49.
// expand top-level with a single option in dictmaker ::= test "COLON" test ("COMMA" test "COLON" test)* "COMMA"?
massage "COMMA"? to ("COMMA" | ε) in dictmaker.
distribute in dictmaker.
// replace star in dictmaker ::= ("COMMA" test "COLON" test)*
extract star_50 ::= ("COMMA" test "COLON" test)*; in dictmaker.
yaccify star_50 ::= (star_50 ("COMMA" test "COLON" test)) | ε;. // replaces ("COMMA" test "COLON" test)*
// expand top-level with a single option in classdef ::= "CLASS" "NAME" ("LPAR" testlist "RPAR")? "COLON" suite
massage ("LPAR" testlist "RPAR")? to (("LPAR" testlist "RPAR") | ε) in classdef.
distribute in classdef.
// replace star in arglist ::= (argument "COMMA")*
extract star_argument_COMMA ::= (argument "COMMA")*; in arglist.
yaccify star_argument_COMMA ::= (star_argument_COMMA (argument "COMMA")) | ε;. // replaces (argument "COMMA")*
// replace optional in arglist ::= "COMMA"?
extract opt_52 ::= "COMMA"?; in arglist.
massage "COMMA"? to ("COMMA" | ε) in opt_52.
// replace optional in arglist ::= ("COMMA" "DOUBLESTAR" test)?
extract opt_53 ::= ("COMMA" "DOUBLESTAR" test)?; in arglist.
massage ("COMMA" "DOUBLESTAR" test)? to (("COMMA" "DOUBLESTAR" test) | ε) in opt_53.
// replace embedded choice in arglist ::= (argument opt_52) | ("STAR" test opt_53) | ("DOUBLESTAR" test)
extract pick_54 ::= (argument opt_52) | ("STAR" test opt_53) | ("DOUBLESTAR" test); in arglist.
// expand top-level with a single option in argument ::= (test "EQUAL")? test
massage (test "EQUAL")? to ((test "EQUAL") | ε) in argument.
distribute in argument.
// expand top-level with a single option in list_for ::= "FOR" exprlist "IN" testlist_safe list_iter?
massage list_iter? to (list_iter | ε) in list_for.
distribute in list_for.
// expand top-level with a single option in list_if ::= "IF" test list_iter?
massage list_iter? to (list_iter | ε) in list_if.
distribute in list_if.

// Phase 2:
// Equating 9 cloned non-terminals:
equate opt_49 with opt_COMMA.
equate opt_27 with opt_COMMA_test.
equate star_40 with star_COMMA_test.
equate opt_41 with opt_COMMA.
equate opt_52 with opt_COMMA.
equate plus_48 with plus_COMMA_test.
equate star_47 with star_COMMA_test.
equate opt_13 with opt_COMMA.
equate opt_23 with opt_COMMA_test.

// Phase 3:
// Renaming 15 generated non-terminals:
rename opt_44 to opt_test_only globally. // RHS is test | ε
rename star_9 to star_fpdef_notest globally. // RHS is (star_fpdef_notest "COMMA" fpdef) | ε
rename star_50 to star_test_COLON_test globally. // RHS is (star_test_COLON_test "COMMA" test "COLON" test) | ε
rename plus_25 to plus_except globally. // RHS is (plus_except except_clause "COLON" suite) | (except_clause "COLON" suite)
rename pick_33 to pick_unop globally. // RHS is "PLUS" | "MINUS" | "TILDE"
rename pick_32 to pick_multop globally. // RHS is "STAR" | "SLASH" | "PERCENT" | "DOUBLESLASH"
rename opt_18 to opt_test_3 globally. // RHS is ("COMMA" test opt_COMMA_test) | ε
rename opt_16 to opt_test_2 globally. // RHS is (plus_COMMA_test opt_COMMA) | ε
rename opt_26 to opt_ELSE globally. // RHS is ("ELSE" "COLON" suite) | ε
rename star_24 to star_ELIF globally. // RHS is (star_ELIF "ELIF" test "COLON" suite) | ε
rename opt_53 to opt_DOUBLESTAR_test globally. // RHS is ("COMMA" "DOUBLESTAR" test) | ε
rename opt_5 to opt_DOUBLESTAR_NAME globally. // RHS is ("COMMA" "DOUBLESTAR" "NAME") | ε
rename star_1 to star_NEWLINE_stmt globally. // RHS is (star_NEWLINE_stmt pick_NEWLINE_stmt) | ε
rename pick_54 to pick_argument_short globally. // RHS is (argument opt_COMMA) | ("STAR" test opt_DOUBLESTAR_test) | ("DOUBLESTAR" test)
rename pick_6 to pick_STAR_DOUBLESTAR globally. // RHS is ("STAR" "NAME" opt_DOUBLESTAR_NAME) | ("DOUBLESTAR" "NAME")

// The generated bisonify transformations end here.

