// Generated by transforming |cwd:///work-in-progress/menhir/original/3.6.0.mly| on 2018-01-11 at 14:10:19.269+00:00
%{
%}

// 89 tokens, in alphabetical order:
%token AMPEREQUAL AMPERSAND AND ARROW AS ASSERT ASYNC AT ATEQ AWAIT BAR
%token BREAK CIRCUMFLEX CIRCUMFLEXEQUAL CLASS COLON COMMA CONTINUE DEDENT
%token DEF DEL DOT DOUBLESLASH DOUBLESLASHEQUAL DOUBLESTAR DOUBLESTAREQUAL
%token ELIF ELSE ENDMARKER EQEQUAL EQUAL EXCEPT FALSE FINALLY FOR FROM GLOBAL
%token GREATER GREATEREQUAL GRLT IF IMPORT IN INDENT IS LAMBDA LBRACE LEFTSHIFT
%token LEFTSHIFTEQUAL LESS LESSEQUAL LPAR LSQB MINEQUAL MINUS NAME NEWLINE
%token NONE NONLOCAL NOT NOTEQUAL NUMBER OR PASS PERCENT PERCENTEQUAL PLUS
%token PLUSEQUAL RAISE RBRACE RETURN RIGHTSHIFT RIGHTSHIFTEQUAL RPAR RSQB
%token SEMI SLASH SLASHEQUAL STAR STAREQUAL STRING THREE_DOTS TILDE TRUE
%token TRY VBAREQUAL WHILE WITH YIELD

%start <unit>start


%%

start:
	  file_input
	{} ;
file_input: // Used in: start
	  _star(_choice(NEWLINE | stmt {}) {}) ENDMARKER
	{} ;
decorator: // Used in: decorators
	  AT dotted_name _optional(LPAR _optional(arglist {}) RPAR {}) NEWLINE
	{} ;
decorators: // Used in: decorated
	  _plus(decorator {})
	{} ;
decorated: // Used in: compound_stmt
	  decorators _choice(classdef | funcdef | async_funcdef {})
	{} ;
async_funcdef: // Used in: decorated
	  ASYNC funcdef
	{} ;
funcdef: // Used in: decorated, async_funcdef, compound_stmt, async_stmt
	  DEF NAME parameters _optional(ARROW test {}) COLON suite
	{} ;
parameters: // Used in: funcdef
	  LPAR _optional(typedargslist {}) RPAR
	{} ;
typedargslist: // Used in: parameters
	  tfpdef _optional(EQUAL test {}) _star(COMMA tfpdef _optional(EQUAL test {}) {}) _optional(COMMA _optional(_choice(STAR _optional(tfpdef {}) _star(COMMA tfpdef _optional(EQUAL test {}) {}) _optional(COMMA _optional(DOUBLESTAR tfpdef _optional(COMMA {}) {}) {}) | DOUBLESTAR tfpdef _optional(COMMA {}) {}) {}) {})
	| STAR _optional(tfpdef {}) _star(COMMA tfpdef _optional(EQUAL test {}) {}) _optional(COMMA _optional(DOUBLESTAR tfpdef _optional(COMMA {}) {}) {})
	| DOUBLESTAR tfpdef _optional(COMMA {})
	{} ;
tfpdef: // Used in: typedargslist
	  NAME _optional(COLON test {})
	{} ;
varargslist: // Used in: lambdef, lambdef_nocond
	  vfpdef _optional(EQUAL test {}) _star(COMMA vfpdef _optional(EQUAL test {}) {}) _optional(COMMA _optional(_choice(STAR _optional(vfpdef {}) _star(COMMA vfpdef _optional(EQUAL test {}) {}) _optional(COMMA _optional(DOUBLESTAR vfpdef _optional(COMMA {}) {}) {}) | DOUBLESTAR vfpdef _optional(COMMA {}) {}) {}) {})
	| STAR _optional(vfpdef {}) _star(COMMA vfpdef _optional(EQUAL test {}) {}) _optional(COMMA _optional(DOUBLESTAR vfpdef _optional(COMMA {}) {}) {})
	| DOUBLESTAR vfpdef _optional(COMMA {})
	{} ;
vfpdef: // Used in: varargslist
	  NAME
	{} ;
stmt: // Used in: file_input, suite
	  simple_stmt
	| compound_stmt
	{} ;
simple_stmt: // Used in: stmt, suite
	  small_stmt _star(SEMI small_stmt {}) _optional(SEMI {}) NEWLINE
	{} ;
small_stmt: // Used in: simple_stmt
	  expr_stmt
	| del_stmt
	| pass_stmt
	| flow_stmt
	| import_stmt
	| global_stmt
	| nonlocal_stmt
	| assert_stmt
	{} ;
expr_stmt: // Used in: small_stmt
	  testlist_star_expr _choice(annassign | augassign _choice(yield_expr | testlist {}) | _star(EQUAL _choice(yield_expr | testlist_star_expr {}) {}) {})
	{} ;
annassign: // Used in: expr_stmt
	  COLON test _optional(EQUAL test {})
	{} ;
testlist_star_expr: // Used in: expr_stmt
	  _choice(test | star_expr {}) _star(COMMA _choice(test | star_expr {}) {}) _optional(COMMA {})
	{} ;
augassign: // Used in: expr_stmt
	  PLUSEQUAL
	| MINEQUAL
	| STAREQUAL
	| ATEQ
	| SLASHEQUAL
	| PERCENTEQUAL
	| AMPEREQUAL
	| VBAREQUAL
	| CIRCUMFLEXEQUAL
	| LEFTSHIFTEQUAL
	| RIGHTSHIFTEQUAL
	| DOUBLESTAREQUAL
	| DOUBLESLASHEQUAL
	{} ;
del_stmt: // Used in: small_stmt
	  DEL exprlist
	{} ;
pass_stmt: // Used in: small_stmt
	  PASS
	{} ;
flow_stmt: // Used in: small_stmt
	  break_stmt
	| continue_stmt
	| return_stmt
	| raise_stmt
	| yield_stmt
	{} ;
break_stmt: // Used in: flow_stmt
	  BREAK
	{} ;
continue_stmt: // Used in: flow_stmt
	  CONTINUE
	{} ;
return_stmt: // Used in: flow_stmt
	  RETURN _optional(testlist {})
	{} ;
yield_stmt: // Used in: flow_stmt
	  yield_expr
	{} ;
raise_stmt: // Used in: flow_stmt
	  RAISE _optional(test _optional(FROM test {}) {})
	{} ;
import_stmt: // Used in: small_stmt
	  import_name
	| import_from
	{} ;
import_name: // Used in: import_stmt
	  IMPORT dotted_as_names
	{} ;
import_from: // Used in: import_stmt
	  FROM pick_dotted_name IMPORT _choice(STAR | LPAR import_as_names RPAR | import_as_names {})
	{} ;
import_as_name: // Used in: import_as_names
	  NAME _optional(AS NAME {})
	{} ;
dotted_as_name: // Used in: dotted_as_names
	  dotted_name _optional(AS NAME {})
	{} ;
import_as_names: // Used in: import_from
	  import_as_name _star(COMMA import_as_name {}) _optional(COMMA {})
	{} ;
dotted_as_names: // Used in: import_name
	  dotted_as_name _star(COMMA dotted_as_name {})
	{} ;
dotted_name: // Used in: decorator, dotted_as_name, pick_dotted_name
	  NAME _star(DOT NAME {})
	{} ;
global_stmt: // Used in: small_stmt
	  GLOBAL NAME _star(COMMA NAME {})
	{} ;
nonlocal_stmt: // Used in: small_stmt
	  NONLOCAL NAME _star(COMMA NAME {})
	{} ;
assert_stmt: // Used in: small_stmt
	  ASSERT test _optional(COMMA test {})
	{} ;
compound_stmt: // Used in: stmt
	  if_stmt
	| while_stmt
	| for_stmt
	| try_stmt
	| with_stmt
	| funcdef
	| classdef
	| decorated
	| async_stmt
	{} ;
async_stmt: // Used in: compound_stmt
	  ASYNC _choice(funcdef | with_stmt | for_stmt {})
	{} ;
if_stmt: // Used in: compound_stmt
	  IF test COLON suite _star(ELIF test COLON suite {}) _optional(ELSE COLON suite {})
	{} ;
while_stmt: // Used in: compound_stmt
	  WHILE test COLON suite _optional(ELSE COLON suite {})
	{} ;
for_stmt: // Used in: compound_stmt, async_stmt
	  FOR exprlist IN testlist COLON suite _optional(ELSE COLON suite {})
	{} ;
try_stmt: // Used in: compound_stmt
	  TRY COLON suite _choice(_plus(except_clause COLON suite {}) _optional(ELSE COLON suite {}) _optional(FINALLY COLON suite {}) | FINALLY COLON suite {})
	{} ;
with_stmt: // Used in: compound_stmt, async_stmt
	  WITH with_item _star(COMMA with_item {}) COLON suite
	{} ;
with_item: // Used in: with_stmt
	  test _optional(AS expr {})
	{} ;
except_clause: // Used in: try_stmt
	  EXCEPT _optional(test _optional(AS NAME {}) {})
	{} ;
suite: // Used in: funcdef, if_stmt, while_stmt, for_stmt, try_stmt, with_stmt, classdef
	  simple_stmt
	| NEWLINE INDENT _plus(stmt {}) DEDENT
	{} ;
test: // Used in: funcdef, typedargslist, tfpdef, varargslist, annassign, testlist_star_expr, raise_stmt, assert_stmt, if_stmt, while_stmt, with_item, except_clause, test, lambdef, testlist_comp, subscript, sliceop, testlist, dictorsetmaker, argument, yield_arg
	  or_test _optional(IF or_test ELSE test {})
	| lambdef
	{} ;
test_nocond: // Used in: lambdef_nocond, comp_if
	  or_test
	| lambdef_nocond
	{} ;
lambdef: // Used in: test
	  LAMBDA _optional(varargslist {}) COLON test
	{} ;
lambdef_nocond: // Used in: test_nocond
	  LAMBDA _optional(varargslist {}) COLON test_nocond
	{} ;
or_test: // Used in: test, test_nocond, comp_for
	  and_test _star(OR and_test {})
	{} ;
and_test: // Used in: or_test
	  not_test _star(AND not_test {})
	{} ;
not_test: // Used in: and_test, not_test
	  NOT not_test
	| comparison
	{} ;
comparison: // Used in: not_test
	  expr _star(comp_op expr {})
	{} ;
comp_op: // Used in: comparison
	  LESS
	| GREATER
	| EQEQUAL
	| GREATEREQUAL
	| LESSEQUAL
	| GRLT
	| NOTEQUAL
	| IN
	| NOT IN
	| IS
	| IS NOT
	{} ;
star_expr: // Used in: testlist_star_expr, testlist_comp, exprlist, dictorsetmaker
	  STAR expr
	{} ;
expr: // Used in: with_item, comparison, star_expr, exprlist, dictorsetmaker
	  xor_expr _star(BAR xor_expr {})
	{} ;
xor_expr: // Used in: expr
	  and_expr _star(CIRCUMFLEX and_expr {})
	{} ;
and_expr: // Used in: xor_expr
	  shift_expr _star(AMPERSAND shift_expr {})
	{} ;
shift_expr: // Used in: and_expr
	  arith_expr _star(_choice(LEFTSHIFT | RIGHTSHIFT {}) arith_expr {})
	{} ;
arith_expr: // Used in: shift_expr
	  term _star(_choice(PLUS | MINUS {}) term {})
	{} ;
term: // Used in: arith_expr
	  factor _star(_choice(STAR | AT | SLASH | PERCENT | DOUBLESLASH {}) factor {})
	{} ;
factor: // Used in: term, factor, power
	  _choice(PLUS | MINUS | TILDE {}) factor
	| power
	{} ;
power: // Used in: factor
	  atom_expr _optional(DOUBLESTAR factor {})
	{} ;
atom_expr: // Used in: power
	  _optional(AWAIT {}) atom _star(trailer {})
	{} ;
atom: // Used in: atom_expr
	  LPAR _optional(_choice(yield_expr | testlist_comp {}) {}) RPAR
	| LSQB _optional(testlist_comp {}) RSQB
	| LBRACE _optional(dictorsetmaker {}) RBRACE
	| NAME
	| NUMBER
	| _plus(STRING {})
	| THREE_DOTS
	| NONE
	| TRUE
	| FALSE
	{} ;
testlist_comp: // Used in: atom
	  _choice(test | star_expr {}) _choice(comp_for | _star(COMMA _choice(test | star_expr {}) {}) _optional(COMMA {}) {})
	{} ;
trailer: // Used in: atom_expr
	  LPAR _optional(arglist {}) RPAR
	| LSQB subscriptlist RSQB
	| DOT NAME
	{} ;
subscriptlist: // Used in: trailer
	  subscript _star(COMMA subscript {}) _optional(COMMA {})
	{} ;
subscript: // Used in: subscriptlist
	  test
	| _optional(test {}) COLON _optional(test {}) _optional(sliceop {})
	{} ;
sliceop: // Used in: subscript
	  COLON _optional(test {})
	{} ;
exprlist: // Used in: del_stmt, for_stmt, comp_for
	  _choice(expr | star_expr {}) _star(COMMA _choice(expr | star_expr {}) {}) _optional(COMMA {})
	{} ;
testlist: // Used in: expr_stmt, return_stmt, for_stmt, yield_arg
	  test _star(COMMA test {}) _optional(COMMA {})
	{} ;
dictorsetmaker: // Used in: atom
	  _choice(test COLON test | DOUBLESTAR expr {}) _choice(comp_for | _star(COMMA _choice(test COLON test | DOUBLESTAR expr {}) {}) _optional(COMMA {}) {})
	| _choice(test | star_expr {}) _choice(comp_for | _star(COMMA _choice(test | star_expr {}) {}) _optional(COMMA {}) {})
	{} ;
classdef: // Used in: decorated, compound_stmt
	  CLASS NAME _optional(LPAR _optional(arglist {}) RPAR {}) COLON suite
	{} ;
arglist: // Used in: decorator, trailer, classdef
	  argument _star(COMMA argument {}) _optional(COMMA {})
	{} ;
argument: // Used in: arglist
	  test _optional(comp_for {})
	| test EQUAL test
	| DOUBLESTAR test
	| STAR test
	{} ;
comp_iter: // Used in: comp_for, comp_if
	  comp_for
	| comp_if
	{} ;
comp_for: // Used in: testlist_comp, dictorsetmaker, argument, comp_iter
	  _optional(ASYNC {}) FOR exprlist IN or_test _optional(comp_iter {})
	{} ;
comp_if: // Used in: comp_iter
	  IF test_nocond _optional(comp_iter {})
	{} ;
yield_expr: // Used in: expr_stmt, yield_stmt, atom
	  YIELD _optional(yield_arg {})
	{} ;
yield_arg: // Used in: yield_expr
	  FROM test
	| testlist
	{} ;
pick_dotted_name: // Used in: import_from
	  _star(_choice(DOT | THREE_DOTS {}) {}) _choice(dotted_name | DOT | THREE_DOTS {})
	{} ;

%%


