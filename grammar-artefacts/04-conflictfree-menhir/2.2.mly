// Generated by transforming |cwd:///work-in-progress/menhir/original/2.2.mly| on 2018-01-11 at 13:50:20.682+00:00
%{
%}

// 80 tokens, in alphabetical order:
%token AMPEREQUAL AMPERSAND AND ASSERT BACKQUOTE BAR BREAK CIRCUMFLEX CIRCUMFLEXEQUAL
%token CLASS COLON COMMA CONTINUE DEDENT DEF DEL DOT DOUBLESLASH DOUBLESLASHEQUAL
%token DOUBLESTAR DOUBLESTAREQUAL ELIF ELSE ENDMARKER EQEQUAL EQUAL EXCEPT
%token EXEC FINALLY FOR FROM GLOBAL GREATER GREATEREQUAL GRLT IF IMPORT
%token IN INDENT IS LAMBDA LBRACE LEFTSHIFT LEFTSHIFTEQUAL LESS LESSEQUAL
%token LPAR LSQB MINEQUAL MINUS NAME NEWLINE NOT NOTEQUAL NUMBER OR PASS
%token PERCENT PERCENTEQUAL PLUS PLUSEQUAL PRINT RAISE RBRACE RETURN RIGHTSHIFT
%token RIGHTSHIFTEQUAL RPAR RSQB SEMI SLASH SLASHEQUAL STAR STAREQUAL STRING
%token TILDE TRY VBAREQUAL WHILE YIELD

%start <unit>start


%%

start:
	  file_input
	{} ;
file_input: // Used in: start
	  _star(_choice(NEWLINE | stmt {}) {}) ENDMARKER
	{} ;
funcdef: // Used in: compound_stmt
	  DEF NAME parameters COLON suite
	{} ;
parameters: // Used in: funcdef
	  LPAR _optional(varargslist {}) RPAR
	{} ;
varargslist: // Used in: parameters, lambdef
	  star_fpdef_COMMA STAR NAME _optional(COMMA DOUBLESTAR NAME {})
	| star_fpdef_COMMA DOUBLESTAR NAME
	| star_fpdef_COMMA fpdef _optional(EQUAL test {}) _optional(COMMA {})
	{} ;
fpdef: // Used in: varargslist, fplist, star_fpdef_COMMA
	  NAME
	| LPAR fplist RPAR
	{} ;
fplist: // Used in: fpdef
	  fpdef _star(COMMA fpdef {}) _optional(COMMA {})
	{} ;
stmt: // Used in: file_input, suite
	  simple_stmt
	| compound_stmt
	{} ;
simple_stmt: // Used in: stmt, suite
	  small_stmt _star(SEMI small_stmt {}) _optional(SEMI {}) NEWLINE
	{} ;
small_stmt: // Used in: simple_stmt
	  expr_stmt
	| print_stmt
	| del_stmt
	| pass_stmt
	| flow_stmt
	| import_stmt
	| global_stmt
	| exec_stmt
	| assert_stmt
	{} ;
expr_stmt: // Used in: small_stmt
	  testlist _choice(augassign testlist | _star(EQUAL testlist {}) {})
	{} ;
augassign: // Used in: expr_stmt
	  PLUSEQUAL
	| MINEQUAL
	| STAREQUAL
	| SLASHEQUAL
	| PERCENTEQUAL
	| AMPEREQUAL
	| VBAREQUAL
	| CIRCUMFLEXEQUAL
	| LEFTSHIFTEQUAL
	| RIGHTSHIFTEQUAL
	| DOUBLESTAREQUAL
	| DOUBLESLASHEQUAL
	{} ;
print_stmt: // Used in: small_stmt
	  PRINT _choice(_optional(test _star(COMMA test {}) _optional(COMMA {}) {}) | RIGHTSHIFT test _optional(_plus(COMMA test {}) _optional(COMMA {}) {}) {})
	{} ;
del_stmt: // Used in: small_stmt
	  DEL exprlist
	{} ;
pass_stmt: // Used in: small_stmt
	  PASS
	{} ;
flow_stmt: // Used in: small_stmt
	  break_stmt
	| continue_stmt
	| return_stmt
	| raise_stmt
	| yield_stmt
	{} ;
break_stmt: // Used in: flow_stmt
	  BREAK
	{} ;
continue_stmt: // Used in: flow_stmt
	  CONTINUE
	{} ;
return_stmt: // Used in: flow_stmt
	  RETURN _optional(testlist {})
	{} ;
yield_stmt: // Used in: flow_stmt
	  YIELD testlist
	{} ;
raise_stmt: // Used in: flow_stmt
	  RAISE _optional(test _optional(COMMA test _optional(COMMA test {}) {}) {})
	{} ;
import_stmt: // Used in: small_stmt
	  IMPORT dotted_as_name _star(COMMA dotted_as_name {})
	| FROM dotted_name IMPORT _choice(STAR | import_as_name _star(COMMA import_as_name {}) {})
	{} ;
import_as_name: // Used in: import_stmt
	  NAME _optional(NAME NAME {})
	{} ;
dotted_as_name: // Used in: import_stmt
	  dotted_name _optional(NAME NAME {})
	{} ;
dotted_name: // Used in: import_stmt, dotted_as_name
	  NAME _star(DOT NAME {})
	{} ;
global_stmt: // Used in: small_stmt
	  GLOBAL NAME _star(COMMA NAME {})
	{} ;
exec_stmt: // Used in: small_stmt
	  EXEC expr _optional(IN test _optional(COMMA test {}) {})
	{} ;
assert_stmt: // Used in: small_stmt
	  ASSERT test _optional(COMMA test {})
	{} ;
compound_stmt: // Used in: stmt
	  if_stmt
	| while_stmt
	| for_stmt
	| try_stmt
	| funcdef
	| classdef
	{} ;
if_stmt: // Used in: compound_stmt
	  IF test COLON suite _star(ELIF test COLON suite {}) _optional(ELSE COLON suite {})
	{} ;
while_stmt: // Used in: compound_stmt
	  WHILE test COLON suite _optional(ELSE COLON suite {})
	{} ;
for_stmt: // Used in: compound_stmt
	  FOR exprlist IN testlist COLON suite _optional(ELSE COLON suite {})
	{} ;
try_stmt: // Used in: compound_stmt
	  TRY COLON suite _plus(except_clause COLON suite {}) _optional(ELSE COLON suite {})
	| TRY COLON suite FINALLY COLON suite
	{} ;
except_clause: // Used in: try_stmt
	  EXCEPT _optional(test _optional(COMMA test {}) {})
	{} ;
suite: // Used in: funcdef, if_stmt, while_stmt, for_stmt, try_stmt, classdef
	  simple_stmt
	| NEWLINE INDENT _plus(stmt {}) DEDENT
	{} ;
test: // Used in: varargslist, print_stmt, raise_stmt, exec_stmt, assert_stmt, if_stmt, while_stmt, except_clause, listmaker, lambdef, subscript, sliceop, testlist, testlist_safe, dictmaker, arglist, argument, list_if, star_fpdef_COMMA, testlist1
	  and_test _star(OR and_test {})
	| lambdef
	{} ;
and_test: // Used in: test
	  not_test _star(AND not_test {})
	{} ;
not_test: // Used in: and_test, not_test
	  NOT not_test
	| comparison
	{} ;
comparison: // Used in: not_test
	  expr _star(comp_op expr {})
	{} ;
comp_op: // Used in: comparison
	  LESS
	| GREATER
	| EQEQUAL
	| GREATEREQUAL
	| LESSEQUAL
	| GRLT
	| NOTEQUAL
	| IN
	| NOT IN
	| IS
	| IS NOT
	{} ;
expr: // Used in: exec_stmt, comparison, exprlist
	  xor_expr _star(BAR xor_expr {})
	{} ;
xor_expr: // Used in: expr
	  and_expr _star(CIRCUMFLEX and_expr {})
	{} ;
and_expr: // Used in: xor_expr
	  shift_expr _star(AMPERSAND shift_expr {})
	{} ;
shift_expr: // Used in: and_expr
	  arith_expr _star(_choice(LEFTSHIFT | RIGHTSHIFT {}) arith_expr {})
	{} ;
arith_expr: // Used in: shift_expr
	  term _star(_choice(PLUS | MINUS {}) term {})
	{} ;
term: // Used in: arith_expr
	  factor _star(_choice(STAR | SLASH | PERCENT | DOUBLESLASH {}) factor {})
	{} ;
factor: // Used in: term, factor, power
	  _choice(PLUS | MINUS | TILDE {}) factor
	| power
	{} ;
power: // Used in: factor
	  atom _star(trailer {}) _optional(DOUBLESTAR factor {})
	{} ;
atom: // Used in: power
	  LPAR _optional(testlist {}) RPAR
	| LSQB _optional(listmaker {}) RSQB
	| LBRACE _optional(dictmaker {}) RBRACE
	| BACKQUOTE testlist1 BACKQUOTE
	| NAME
	| NUMBER
	| _plus(STRING {})
	{} ;
listmaker: // Used in: atom
	  test _choice(list_for | _star(COMMA test {}) _optional(COMMA {}) {})
	{} ;
lambdef: // Used in: test
	  LAMBDA _optional(varargslist {}) COLON test
	{} ;
trailer: // Used in: power
	  LPAR _optional(arglist {}) RPAR
	| LSQB subscriptlist RSQB
	| DOT NAME
	{} ;
subscriptlist: // Used in: trailer
	  subscript _star(COMMA subscript {}) _optional(COMMA {})
	{} ;
subscript: // Used in: subscriptlist
	  DOT DOT DOT
	| test
	| _optional(test {}) COLON _optional(test {}) _optional(sliceop {})
	{} ;
sliceop: // Used in: subscript
	  COLON _optional(test {})
	{} ;
exprlist: // Used in: del_stmt, for_stmt, list_for
	  expr _star(COMMA expr {}) _optional(COMMA {})
	{} ;
testlist: // Used in: expr_stmt, return_stmt, yield_stmt, for_stmt, atom, classdef
	  test _star(COMMA test {}) _optional(COMMA {})
	{} ;
testlist_safe: // Used in: list_for
	  test _optional(_plus(COMMA test {}) _optional(COMMA {}) {})
	{} ;
dictmaker: // Used in: atom
	  test COLON test _star(COMMA test COLON test {}) _optional(COMMA {})
	{} ;
classdef: // Used in: compound_stmt
	  CLASS NAME _optional(LPAR testlist RPAR {}) COLON suite
	{} ;
arglist: // Used in: trailer
	  _star(argument COMMA {}) _choice(argument _optional(COMMA {}) | STAR test _optional(COMMA DOUBLESTAR test {}) | DOUBLESTAR test {})
	{} ;
argument: // Used in: arglist
	  _optional(test EQUAL {}) test
	{} ;
list_iter: // Used in: list_for, list_if
	  list_for
	| list_if
	{} ;
list_for: // Used in: listmaker, list_iter
	  FOR exprlist IN testlist_safe _optional(list_iter {})
	{} ;
list_if: // Used in: list_iter
	  IF test _optional(list_iter {})
	{} ;
star_fpdef_COMMA: // Used in: varargslist, star_fpdef_COMMA
	  star_fpdef_COMMA fpdef _optional(EQUAL test {}) COMMA
	| // empty
	{} ;
testlist1: // Used in: atom
	  test _star(COMMA test {})
	{} ;

%%


